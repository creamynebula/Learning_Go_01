t.Errorf("Esperávamos %d, mas recebemos %d. GRRRRRRR.", expected, sum) //%d imprime int. %q imprimia string.
t.Helper() // marca a função aonde o Helper foi chamada como pertencente a um teste.

BENCHMARKING: "go test -bench=." ou "go test -bench="." no Powershell"

/*
func TestSomething(t *testing.T) {

	myTests := []struct {
		testName string
		atrb2 CustomType
		atrb3 float64  // isso pode ser uma area, e CustomType tem um método pra calcular área, que vamos testar
	}{
		{"BlaBla", CustomType{data}, 64.0},
		{"Chihaya", CustomType{data}, 13.0},
	}

	for _, test := range myTests {
		t.Run(test.testName, func(t *testing.T) {
			got := test.atrb2.Area()
			want := test.atrb3
			if got != want {
				t.Errorf("recebemos %g, queriamos %g", got, want)
			}

		})
	}
}

// aí vc pode "go test -run TestSomething/BlaBla" ou "go test -run TestSomething/Chihaya"
*/

func TestSomething2(t *testing.T) {

	t.Run("testName1", func(t *testing.T) {
		got :=
		want :=
		if got != want {
			t.Errorf("olaaaa enfermeira! queriamos %,g recebemos %g.", got, want)
		}
	})
	t.Run("testName2", func(t *testing.T) {
		got :=
		want :=
		if got != want {
			t.Errorf("olaaaa enfermeira! queriamos %,g recebemos %g.", got, want)
		}
	})
}