// https://go.dev/blog/slices-intro

Slice é um conjunto:
- um pointer pra um segmento de um array
- o length do segmento a que o slice se refere
- a capacidade: o length máximo do segmento, a partir do elemento que o slice aponta

var s []byte
s = make([]byte, 5, 5)   // []type, length, capacity
// s == []byte{0, 0, 0, 0, 0}

// ou poderia simplesmente
s := make([]byte, 5)

len(s)   // 5 length
cap(s)   // 5 capacity
// len() e cap() retornam 0 para um slice 'nil'

s = s[1:4]   // 3 length, 4 capacity
s = s[:5]   // 4 length, 4 capacity
// só pode crescer o slice até a capacidade dele
// também não pode tentar acessar elementos "anteriores"
// pra aumentar um slice, vc declara um novo
// aí aloca length e capacidade suficientes
// copia os elementos com copy(dst, src []T)
// e dps muda o pointer do slice original pro novo slice
t := make([]byte, len(s), (cap(s)+1)*2)
copy(t, s)
s = t


b := []byte{'g', 'o', 'l', 'a', 'n', 'g'}
// b[1:4] == []byte{'o', 'l', 'a'}, sharing the same storage as b


x := [3]string{"Лайка", "Белка", "Стрелка"}
s := x[:] // a slice referencing the storage of x


d := []byte{'r', 'o', 'a', 'd'}
e := d[2:]
// e == []byte{'a', 'd'}
e[1] = 'm'
// e == []byte{'a', 'm'}
// d == []byte{'r', 'o', 'a', 'm'}




// coloca um conjunto de bytes no fim de slice.
// se nao couber, aloca um novo antes, copia os elementos,
// e retorna o novo slice
func AppendByte(slice []byte, data ...byte) []byte {
    m := len(slice)
    n := m + len(data)
    if n > cap(slice) { // if necessary, reallocate
        // allocate double what's needed, for future growth.
        newSlice := make([]byte, (n+1)*2)
        copy(newSlice, slice)
        slice = newSlice
    }
    slice = slice[0:n]
    copy(slice[m:n], data)
    return slice
}




// The append function appends the elements x to the end of the slice s,
// and grows the slice if a greater capacity is needed.
// é o que implementamos com AppendByte, mas lá temos controle dos detalhes.
func append(s []T, x ...T) []T

a := make([]int, 1)
// a == []int{0}
a = append(a, 1, 2, 3)
// a == []int{0, 1, 2, 3}




// To append one slice to another, use ... to expand the second argument to a list of arguments.
a := []string{"John", "Paul"}
b := []string{"George", "Ringo", "Pete"}
a = append(a, b...) // equivalent to "append(a, b[0], b[1], b[2])"
// a == []string{"John", "Paul", "George", "Ringo", "Pete"}