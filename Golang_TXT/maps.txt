https://go.dev/blog/maps

var m map[string]int  
// map string->int, m == nil. Não pode escrever nele ainda, senão dá erro!


m = make(map[string]int)
// m agora pointer pra hash table (string->int)
// por default, m['whatever'] == 0


// esse aqui embaixo vai ser equivalente a esse uso do make em cima
m = map[string]int{}

m["route"] = 66  // "route" -> 66
m["towel"] = 42


i := m["route"]
// declarada 'i', iniciada com valor 66


j := m["root"]
// j == 0.
// Por default, tentar acessar key não declarada retorna o 'zero value' do tipo, que pra int é 0


n := len(m)
// len(m) retorna o número de keys declaradas no map


delete(m, "route")
// delete (mapVar, "key") deleta "key" do map.
// A função não retorna nada, e não fará nada se a key não existir.


i, ok := m["route"]
// 'i' recebe o valor guardado pela key 'route'
// se a key não existe, i == type's zero value
// ok == true se a key existe, false otherwise.


for key, value := range m {
    fmt.Println("Key: ", key, "Value: ", value)
}


karutaClub := map[string]int{
    "chihaya": 0,
    "taichi": 1,
    "kana": 2,
    "desktomu": 3,
    "nishida": 4,
}




// Percorre uma lista de Nodes e imprime os valores.
// Para se um ciclo for detectado na lista.

    type Node struct {
        Next  *Node
        Value interface{}
    }
    var first *Node

    visited := make(map[*Node]bool)
    for n := first; n != nil; n = n.Next {
        if visited[n] {
            fmt.Println("cycle detected")
            break
        }
        visited[n] = true
        fmt.Println(n.Value)
    }




// Percorre um slice contendo pointers para Person.
// Aí, pra cada pessoa, concatena no map 'likes' ('nome' -> *pessoa)
// as pessoas que gostam dela. Então em cada pessoa, temos Likes []string
// que é um slice com os nomes das pessoas de quem a pessoa gosta.
// e no map 'likes', temos um map entre o nome de cada pessoa
// e as que gostam dela. O inverso.

    type Person struct {
        Name  string
        Likes []string
    }
    var people []*Person

    likes := make(map[string][]*Person)
    for _, p := range people {
        for _, l := range p.Likes {
            likes[l] = append(likes[l], p)
        }
    }




// 'm' é um map 'path' -> map('country' -> numHits int)
// add() adiciona um hit de 'country' em 'path'

func add(m map[string]map[string]int, path, country string) {
    mm, ok := m[path]
    if !ok {   // se a url ainda não existe
        mm = make(map[string]int)   // aloca um mapa vazio
        m[path] = mm   // coloca ele na chave correspondente
    }
    mm[country]++   // incrementa o numero de hits
}

hits := make(map[string]map[string]int)
add(hits, "/doc/", "au")   // adiciona um hit da austrália no path '/doc/'
n := hits["/doc/"]["au"]   // 'n' contém o número de hits da austrália em 'doc'


// ainda melhor teria sido implementar dessa forma:

type Key struct {
    Path, Country string
}

hits := make(map[Key]int)   // aloca o map (Key->int)
hits[Key{"/", "vn"}]++   // Incrementa o hit. Se a Key não existir, já cria ela e incrementa normalmente!
n := hits[Key{"/ref/spec", "ch"}]   // número de hits da suíça em /ref/spec




// declara um struct anônimo com um map (string->int), e um Mutex,
// pra garantir segurança no caso de concurrency.

var counter = struct{
    sync.RWMutex   // counter.Lock() e counter.Unlock() pra poder ler/escrever e pra trancar dnv
    m map[string]int
}{m: make(map[string]int)}   // já inicia o counter

counter.RLock()   // agora podemos ler, enquanto seguramos a chave
n := counter.m["some_key"]
counter.RUnlock()   // soltamos a chave
fmt.Println("some_key:", n)

counter.Lock()   // agora podemos escrever, enquanto seguramos a chave
counter.m["some_key"]++
counter.Unlock()