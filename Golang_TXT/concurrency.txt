ALWAYS MAKE CHANNELS. Notice how we have to use make when creating a channel; rather than say var ch chan struct{}. When you use var, the variable will be initialised with the "zero" value of the type. So, for string, it is "", int it is 0, etc.
For channels the zero value is nil, and if you try and send to it with <- , it will block forever, because you cannot send to nil channels.


Use channels when passing ownership of data. Use mutexes for managing state.



var wg = sync.WaitGroup

func main() {

    wg.Add(2) // sinalizo que vou add 2 goroutines
    go func1()
    go func2()
    
    // sinalizar que quero que espera as 2 goroutines anunciadas
    // terminarem de executar	
    wg.Wait()

}




// por default, tanto sends qto receives blockam até que
// ambos os lados estejam "prontos"
package main

import (
	"fmt"
)

func main() {
	// imprime sincronizado, de uma vez
	// ou seja, nao tem problema os processos
	// de envio de msg1 e msg2 serem assíncronos
	// imprime sincronizado justamente pq cada
	// send e receive blockam

	messages1 := make(chan string)
	messages2 := make(chan string)

	go func() {
		messages1 <- "ping"
	}()

	go func() {
		time.Sleep(3 * time.Second)
		messages2 <- "deehoo"
	}()

	msg := (<-messages1) + " " + (<-messages2) // will block until channels are ready and sent the info
	fmt.Println(msg)
}




// Denovo, lembra que sends e receives blockam por default,
// até que ambos os lados estejam prontos
func worker(done chan bool) {
    fmt.Print("working...")
    time.Sleep(2 * time.Second)
    fmt.Println("done!")

    done <- true
}

func main() {

    done := make(chan bool, 1)
    go worker(done)

    // só executa qdo a goroutine aqui em cima, q depende de 'done',
    // tiver terminado de trabalhar!
    <-done 
    // sem esse detalhezinho o programa encerra sem nem imprimir nada
    // ele nao se importa de encerrar enquanto a goroutine ainda trabalha
    // ele encerra qdo a rotina do 'main' termina, creio
}




// Channel directions: dá pra obrigar os channels em uma func
// a apenas enviarem, ou apenas receberem. Type safety!

func ping(pings chan<- string, msg string) {
    // pings é necessariamente um channel que recebe
    pings <- msg
}

func pong(pings <-chan string, pongs chan<- string) {
    // pings é um channel que transmite aqui
    // e pongs um que recebe
    msg := <-pings
    pongs <- msg
}

func main() {
    pings := make(chan string, 1)
    pongs := make(chan string, 1)
    ping(pings, "passed message")
    pong(pings, pongs)
    fmt.Println(<-pongs)
}




// Combinar goroutines, channels e select permite
// esperar por várias operações concorrentes

func main() {

	c1 := make(chan string)
	c2 := make(chan string)

	go func() {
		// dorme mto
		time.Sleep(3 * time.Second)
		c1 <- "c1"
	}()
	go func() {
		// dorme pouco
		time.Sleep(1 * time.Second)
		c2 <- "c2"
	}()

	for i := 0; i < 2; i++ {

		select {
		// cada caso só vai executar qdo o respectv. channel tiver pronto
		// e eles dependem o 1o de uma goroutine que dorme mto,
		// e o 2o de uma goroutine que dorme pouco.
		// c2 acaba imprimindo antes!
		// mas cada case é executado de forma concorrente
		// então o programa leva ~2s mesmo
		case msg1 := <-c1:
			fmt.Println("received", msg1)
		case msg2 := <-c2:
			fmt.Println("received", msg2)

		} // fim select
	} // fim for
}
