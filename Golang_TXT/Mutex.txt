https://yourbasic.org/golang/mutex-explained/
https://golangdocs.com/mutex-in-golang

// Mutex é pra qdo pode rolar um data-race,
// múltiplas goroutines forem escrever dados
// em local compartilhado. Com as travas, se
// garante não escrever ao mesmo tempo.

// Workings of a mutex: Acquire lock, modify data, release lock.



func f(v *int, wg *sync.WaitGroup, m *sync.Mutex) {
    // acquire lock
    m.Lock()
    // do operation
    *v++
    // release lock
    m.Unlock()
    wg.Done()
}
 
func main() {
 
    var wg sync.WaitGroup
    // declare mutex
    var m sync.Mutex
    var v int = 0
 
    for i := 0; i < 1000; i++ {
        wg.Add(1)
        go f(&v, &wg, &m)
    }
 
    wg.Wait()
    fmt.Println("Finished", v)
}





type Counter struct {
	value int
	mu    sync.Mutex // 'zero value' == destrancado
}

func (c *Counter) Inc() {
	// primeiro trancar. aí se outra goroutine chamar esse método,
	// ela fica blockada, até nós destrancarmos.
	c.mu.Lock()         // porta trancada
	defer c.mu.Unlock() // destrancada
	c.value += 1
}

func (c *Counter) Value() int {
	return c.value
}